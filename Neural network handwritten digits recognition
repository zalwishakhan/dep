import pandas as pd
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
%matplotlib inline
(X_train , y_train) , (X_test , y_test )= keras.datasets.mnist.load_data()
len(X_train)
len(X_test)
X_train[0].shape
X_train[0]
plt.matshow(X_train[0])
y_train[0]
y_train[:5]
X_train_flattend= X_train.reshape(len(X_train),28*28)
X_test_flattend= X_test.reshape(len(X_test),28*28)
X_train.shape
X_train_flattend.shape
X_train= X_train/255
X_test= X_test/255
model=keras.Sequential([
keras.layers.Dense(10, input_shape =(784,) ,activation='sigmoid')])
model.compile(
optimizer='adam'
loss = ' sparse_categorical_crossentropy'
metrics= ['accuracy' ]
model.fit (X_train_flattend, y_train,epochs=5)
model.evaluate(X_test_flattend ,y_train)
y_predicted = model.predict(X_train_flattend)
y_predicted[0]
cm.tf.math.confusion_matrix(lables =y_test,predictions=y_predicted_lables)
cm
import seaborn as sn
plt.figure(figsize = (10,7))
sn.heatmap(cm, annot=True, fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Truth')
model = keras.Sequential([
    keras.layers.Dense(100, input_shape=(784,), activation='relu'),
    keras.layers.Dense(10, activation='sigmoid')
])
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(X_train_flattened, y_train, epochs=5)
model.train(X_test_flattend , y_test)
y_predicted = model.predict(X_test_flattened)
y_predicted_labels = [np.argmax(i) for i in y_predicted]
cm = tf.math.confusion_matrix(labels=y_test,predictions=y_predicted_labels)

plt.figure(figsize = (10,7))
sn.heatmap(cm, annot=True, fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Truth')
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),
    keras.layers.Dense(100, activation='relu'),
    keras.layers.Dense(10, activation='sigmoid')
])
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(X_train, y_train, epochs=10)
model.evaluate(X_test , y_test)
